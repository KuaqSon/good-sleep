{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PERIODIC","App","state","sleepTime","sleepTimeResults","wakeupTime","wakeupTimeResults","displaySleepTimePicker","displayWakeupTimePicker","calculateWakeupTime","time","times","forEach","per","wakeup","Date","setTime","getTime","push","toTimeString","slice","setState","pop","calculateSleepTime","sleep","handleSleepTimeChange","formatted24","handleWakeupTimeChange","handlePickSleepTime","hour24","minute","pickTime","setHours","setMinutes","handlePickWakeupTime","this","Fragment","className","onClick","length","map","x","key","switchToMinuteOnHourSelect","onChange","onDoneClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dec1d0f3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Timekeeper from \"react-timekeeper\";\n\nconst PERIODIC = [3, 4, 5, 6];\nclass App extends Component {\n  state = {\n    sleepTime: \"\",\n    sleepTimeResults: [],\n    wakeupTime: \"\",\n    wakeupTimeResults: [],\n    displaySleepTimePicker: false,\n    displayWakeupTimePicker: false\n  };\n\n  componentDidMount() {\n    const sleepTime = new Date();\n    this.setState({\n      sleepTime: sleepTime.toTimeString().slice(0, 5)\n    });\n    this.calculateWakeupTime(sleepTime);\n  }\n\n  calculateWakeupTime = time => {\n    let times = [];\n\n    PERIODIC.forEach(per => {\n      let wakeup = new Date(time);\n      wakeup.setTime(wakeup.getTime() + per * (90 * 60 * 1000));\n      times.push(wakeup.toTimeString().slice(0, 5));\n    });\n\n    this.setState({\n      wakeupTime: times.pop() || \"\",\n      wakeupTimeResults: times\n    });\n  };\n\n  calculateSleepTime = time => {\n    let times = [];\n\n    PERIODIC.forEach(per => {\n      let sleep = new Date(time);\n      sleep.setTime(sleep.getTime() - per * (90 * 60 * 1000));\n      times.push(sleep.toTimeString().slice(0, 5));\n    });\n\n    this.setState({\n      sleepTime: times.pop() || \"\",\n      sleepTimeResults: times\n    });\n  };\n\n  handleSleepTimeChange = time => {\n    this.setState({\n      sleepTime: time.formatted24\n    });\n  };\n\n  handleWakeupTimeChange = time => {\n    this.setState({\n      wakeupTime: time.formatted24\n    });\n  };\n\n  handlePickSleepTime = time => {\n    const { hour24, minute } = time;\n    const pickTime = new Date();\n    pickTime.setHours(hour24);\n    pickTime.setMinutes(minute);\n\n    this.setState({ displaySleepTimePicker: false, sleepTimeResults: [] });\n    this.calculateWakeupTime(pickTime);\n  };\n\n  handlePickWakeupTime = time => {\n    const { hour24, minute } = time;\n    const pickTime = new Date();\n    pickTime.setHours(hour24);\n    pickTime.setMinutes(minute);\n\n    this.setState({ displayWakeupTimePicker: false, wakeupTimeResults: [] });\n    this.calculateSleepTime(pickTime);\n  };\n\n  render() {\n    const {\n      displaySleepTimePicker,\n      displayWakeupTimePicker,\n      sleepTime,\n      wakeupTime,\n      sleepTimeResults,\n      wakeupTimeResults\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <div className=\"about-app\">\n            <div className=\"app-name\">Good Sleep</div>\n            <div className=\"app-author\">Quang Son Nguyen</div>\n          </div>\n          <div className=\"time-container\">\n            <div className=\"time-header\">\n              <div className=\"time-title\">Sleep Time</div>\n              <div className=\"show-picker\">\n                <button\n                  className=\"btn\"\n                  onClick={() =>\n                    this.setState({ displaySleepTimePicker: true })\n                  }\n                >\n                  Pick time\n                </button>\n              </div>\n            </div>\n            <div className=\"time-metric\">{sleepTime}</div>\n            {sleepTimeResults && sleepTimeResults.length > 0 && (\n              <div className=\"result-section\">\n                <div className=\"result-desc\">Or go to bed later at</div>\n                <div className=\"time-result\">\n                  {sleepTimeResults.map(x => (\n                    <div key={x} className=\"time-result-item\">\n                      {x}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          <div className=\"time-container\">\n            <div className=\"time-header\">\n              <div className=\"time-title\">Wakeup Time</div>\n              <div className=\"show-picker\">\n                <button\n                  className=\"btn\"\n                  onClick={() =>\n                    this.setState({ displayWakeupTimePicker: true })\n                  }\n                >\n                  Pick time\n                </button>\n              </div>\n            </div>\n            <div className=\"time-metric\">{wakeupTime}</div>\n            {wakeupTimeResults && wakeupTimeResults.length > 0 && (\n              <div className=\"result-section\">\n                <div className=\"result-desc\">Or wake up earlier at</div>\n                <div className=\"time-result\">\n                  {wakeupTimeResults.map(x => (\n                    <div key={x} className=\"time-result-item\">\n                      {x}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        {displaySleepTimePicker && (\n          <div className=\"time-picker-box\">\n            <Timekeeper\n              time={sleepTime}\n              switchToMinuteOnHourSelect={true}\n              onChange={this.handleSleepTimeChange}\n              onDoneClick={this.handlePickSleepTime}\n            />\n          </div>\n        )}\n        {displayWakeupTimePicker && (\n          <div className=\"time-picker-box\">\n            <Timekeeper\n              time={wakeupTime}\n              switchToMinuteOnHourSelect={true}\n              onChange={this.handleWakeupTimeChange}\n              onDoneClick={this.handlePickWakeupTime}\n            />\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}